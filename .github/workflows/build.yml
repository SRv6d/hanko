---
name: Build

on:
  release:
    types: [published]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-release-archive:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    env:
      ARCHIVE_FILENAME: >-
        hanko-${{ github.ref_name }}-${{ matrix.target }}.${{ startsWith(matrix.os, 'windows') && 'zip' || 'tar.gz' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
          targets: "${{ matrix.target }}"
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
      - uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff
      - name: Install GCC for aarch64
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        if: ${{ contains(matrix.target, 'aarch64') && contains(matrix.target, 'linux') }}
      - name: Install musl tools
        run: sudo apt install -y musl-tools
        if: ${{ contains(matrix.target, 'musl') && contains(matrix.target, 'linux') }}
      - name: Print versions
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Create Release Archive
        run: just release-archive ${{ matrix.target }} ${{ env.ARCHIVE_FILENAME }}

      - name: Upload Release Archive
        run: >-
          gh release upload "${GITHUB_REF_NAME}"
          "${ARCHIVE_FILENAME}"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  cargo-deb:
    permissions:
      contents: write
    needs: build-release-archive
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            arch: amd64
          - target: aarch64-unknown-linux-musl
            arch: arm64
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: target/${{ matrix.target }}
      DEB_FILENAME: hanko-${{ github.ref_name }}-${{ matrix.arch }}.deb
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
      - uses: taiki-e/install-action@0c5db7f7f897c03b771660e91d065338615679f4
        with:
          tool: cargo-deb

      - name: Create Target Release Directory
        run: mkdir -p ${TARGET_DIR}/release
      - name: Download Release Binary
        run: >-
          gh release download ${GITHUB_REF_NAME} --pattern "*${{ matrix.target }}.tar.gz"
          --output - | tar -xz -C ${TARGET_DIR}/release ./hanko
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create Debian Package
        run: >-
          cargo deb --no-build --no-strip --target ${{ matrix.target }}
          --output ${TARGET_DIR}/debian/${DEB_FILENAME}

      - name: Upload Debian Package
        run: >-
          gh release upload "${GITHUB_REF_NAME}"
          "${TARGET_DIR}/debian/${DEB_FILENAME}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  attest-build-provenance:
    permissions:
      id-token: write
      attestations: write
      contents: write
    needs:
      - build-release-archive
      - cargo-deb
    runs-on: ubuntu-latest
    env:
      DOWNLOAD_DIR: release-files
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Download Release Files
        run: >-
          gh release download ${GITHUB_REF_NAME} --dir ${DOWNLOAD_DIR} --pattern "hanko-*"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Attest Build Provenance of Release Files
        id: provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a
        with:
          subject-path: ${{ env.DOWNLOAD_DIR }}/*

      - name: Upload Provenance of Release Files
        run: >-
          gh release upload ${GITHUB_REF_NAME}
          ${{ steps.provenance.outputs.bundle-path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-container-image:
    permissions:
      id-token: write
      attestations: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            platform: linux/amd64
          - target: aarch64-unknown-linux-musl
            platform: linux/arm64
    needs: build-release-archive
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Container Registry Login
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download Release Binary
        run: >-
          gh release download ${GITHUB_REF_NAME} --pattern "*${{ matrix.target }}.tar.gz"
          --output - | tar -xz ./hanko
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Build & Push Image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
